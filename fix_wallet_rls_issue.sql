-- =====================================================
-- üîß CORRECTION DU PROBL√àME RLS DU SYST√àME DE PORTEFEUILLE
-- =====================================================

-- Ce script corrige le probl√®me o√π les utilisateurs ne peuvent pas cr√©er leur portefeuille
-- √† cause des politiques RLS trop restrictives

-- √âtape 1: V√©rifier l'√©tat actuel
SELECT 'üîç √âTAPE 1: V√©rification de l\'√©tat actuel' as info;

-- V√©rifier si la table wallets existe
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'wallets') 
        THEN '‚úÖ Table wallets existe'
        ELSE '‚ùå Table wallets manquante'
    END as status;

-- V√©rifier les politiques RLS actuelles
SELECT 'Politiques RLS actuelles sur wallets:' as info;
SELECT 
    policyname,
    permissive,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'wallets'
ORDER BY policyname;

-- √âtape 2: Supprimer les anciennes politiques RLS probl√©matiques
SELECT 'üîß √âTAPE 2: Suppression des anciennes politiques RLS' as info;

DROP POLICY IF EXISTS "Users can view their own wallet" ON wallets;
DROP POLICY IF EXISTS "Users can update their own wallet" ON wallets;
DROP POLICY IF EXISTS "Users can insert their own wallet" ON wallets;
DROP POLICY IF EXISTS "Users can delete their own wallet" ON wallets;

-- √âtape 3: Cr√©er de nouvelles politiques RLS plus permissives
SELECT 'üîê √âTAPE 3: Cr√©ation de nouvelles politiques RLS' as info;

-- Politique pour permettre aux utilisateurs de voir leur propre portefeuille
CREATE POLICY "Users can view their own wallet" ON wallets
    FOR SELECT USING (auth.uid() = user_id);

-- Politique pour permettre aux utilisateurs de mettre √† jour leur propre portefeuille
CREATE POLICY "Users can update their own wallet" ON wallets
    FOR UPDATE USING (auth.uid() = user_id);

-- Politique pour permettre aux utilisateurs d'ins√©rer leur propre portefeuille
CREATE POLICY "Users can insert their own wallet" ON wallets
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Politique pour permettre aux utilisateurs de supprimer leur propre portefeuille
CREATE POLICY "Users can delete their own wallet" ON wallets
    FOR DELETE USING (auth.uid() = user_id);

-- Politique sp√©ciale pour permettre la cr√©ation automatique de portefeuilles
-- Cette politique permet l'insertion si l'utilisateur n'a pas encore de portefeuille
CREATE POLICY "System can create wallet for new users" ON wallets
    FOR INSERT WITH CHECK (
        NOT EXISTS (
            SELECT 1 FROM wallets WHERE user_id = auth.uid()
        )
    );

-- √âtape 4: V√©rifier et corriger la fonction create_wallet_for_user
SELECT '‚öôÔ∏è √âTAPE 4: Correction de la fonction create_wallet_for_user' as info;

-- Recr√©er la fonction avec une meilleure gestion des erreurs
CREATE OR REPLACE FUNCTION create_wallet_for_user()
RETURNS TRIGGER AS $$
BEGIN
    -- V√©rifier si l'utilisateur a d√©j√† un portefeuille
    IF NOT EXISTS (SELECT 1 FROM wallets WHERE user_id = NEW.id) THEN
        -- Cr√©er un portefeuille pour le nouvel utilisateur
        INSERT INTO wallets (user_id, balance, currency)
        VALUES (NEW.id, 0.00, 'USD');
        
        RAISE NOTICE 'Portefeuille cr√©√© pour l''utilisateur %', NEW.id;
    ELSE
        RAISE NOTICE 'L''utilisateur % a d√©j√† un portefeuille', NEW.id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erreur lors de la cr√©ation du portefeuille pour l''utilisateur %: %', NEW.id, SQLERRM;
        RETURN NEW;
END;
$$ language 'plpgsql';

-- √âtape 5: V√©rifier et recr√©er le trigger
SELECT 'üîó √âTAPE 5: Recr√©ation du trigger' as info;

-- Supprimer l'ancien trigger s'il existe
DROP TRIGGER IF EXISTS create_wallet_for_user_trigger ON users;

-- Cr√©er le nouveau trigger
CREATE TRIGGER create_wallet_for_user_trigger
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION create_wallet_for_user();

-- √âtape 6: Cr√©er des portefeuilles pour les utilisateurs existants qui n'en ont pas
SELECT 'üë• √âTAPE 6: Cr√©ation de portefeuilles pour les utilisateurs existants' as info;

INSERT INTO wallets (user_id, balance, currency)
SELECT 
    u.id,
    0.00,
    'USD'
FROM auth.users u
WHERE NOT EXISTS (
    SELECT 1 FROM wallets w WHERE w.user_id = u.id
);

-- Afficher le nombre de portefeuilles cr√©√©s
SELECT 
    COUNT(*) as portefeuilles_crees,
    'portefeuilles cr√©√©s pour les utilisateurs existants' as info
FROM wallets w
WHERE w.created_at >= NOW() - INTERVAL '1 minute';

-- √âtape 7: V√©rifier les politiques RLS finales
SELECT '‚úÖ √âTAPE 7: V√©rification des politiques RLS finales' as info;

SELECT 
    policyname,
    permissive,
    cmd,
    CASE 
        WHEN cmd = 'SELECT' THEN '‚úÖ Politique SELECT'
        WHEN cmd = 'INSERT' THEN '‚úÖ Politique INSERT'
        WHEN cmd = 'UPDATE' THEN '‚úÖ Politique UPDATE'
        WHEN cmd = 'DELETE' THEN '‚úÖ Politique DELETE'
        ELSE '‚ö†Ô∏è Politique inconnue'
    END as status
FROM pg_policies 
WHERE tablename = 'wallets'
ORDER BY policyname;

-- √âtape 8: Test de cr√©ation de portefeuille
SELECT 'üß™ √âTAPE 8: Test de cr√©ation de portefeuille' as info;

-- Compter le nombre total de portefeuilles
SELECT 
    COUNT(*) as total_portefeuilles,
    'portefeuilles existants' as info
FROM wallets;

-- Compter le nombre d'utilisateurs
SELECT 
    COUNT(*) as total_utilisateurs,
    'utilisateurs dans auth.users' as info
FROM auth.users;

-- V√©rifier la coh√©rence
SELECT 
    CASE 
        WHEN (SELECT COUNT(*) FROM wallets) = (SELECT COUNT(*) FROM auth.users)
        THEN '‚úÖ Tous les utilisateurs ont un portefeuille'
        ELSE '‚ö†Ô∏è Certains utilisateurs n''ont pas de portefeuille'
    END as verification;

-- √âtape 9: Statistiques finales
SELECT 'üìä √âTAPE 9: Statistiques finales' as info;

SELECT 
    'wallets' as table_name,
    COUNT(*) as total_records,
    MIN(created_at) as plus_ancien,
    MAX(created_at) as plus_recent
FROM wallets
UNION ALL
SELECT 
    'wallet_transactions' as table_name,
    COUNT(*) as total_records,
    MIN(created_at) as plus_ancien,
    MAX(created_at) as plus_recent
FROM wallet_transactions;

-- Message de confirmation
SELECT 'üéâ CORRECTION TERMIN√âE AVEC SUCC√àS!' as message;
SELECT 'Le syst√®me de portefeuille est maintenant op√©rationnel.' as info;
SELECT 'Les utilisateurs peuvent maintenant cr√©er et g√©rer leur portefeuille.' as info;
